name: Terraform-Workflow-New
run-name: Testing_workflow_dispatch

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Select the environment (e.g., non-prod, staging, prod)"
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
      folder:
        description: "Terraform folder to deploy"
        required: true
        # default: "./Infra/environment/non-prod"
        type: choice
        options:
          - "./modules/ec2/"
          - "./Infra/environment/prod"
          - "./Infra/environment/uat"

permissions:
  id-token: write
  contents: read
  issues: write

concurrency:
  group: ${{ github.workflow }}

jobs:
  # security:
  #   name: security-workflows/terraform
  #   uses: sherwin-williams-co/security-workflows/.github/workflows/terraform.yaml@v0
  #   secrets: 
  #     DYNATRACE_TOKEN: ${{ secrets.DYNATRACE_TOKEN }}

  infra-planning-approval:
    name: Infra Planning and Approval
    runs-on: ubuntu-latest
    needs: [security]
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Configure Git for Module Access
        run: |
          git config --global url."https://${{ secrets.PAT_GITHUB }}@github.com/".insteadOf "https://github.com/"
          aws sts get-caller-identity

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Install TFLint
        run: |
          curl -LO https://github.com/terraform-linters/tflint/releases/download/v0.41.0/tflint_linux_amd64.zip
          unzip tflint_linux_amd64.zip
          sudo mv tflint /usr/local/bin/

      - name: Lint Terraform code
        run: tflint
        working-directory: ${{ github.event.inputs.folder }}

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ github.event.inputs.folder }}

      - name: Format Terraform code
        run: terraform fmt -recursive
        working-directory: ${{ github.event.inputs.folder }}

      - name: Check Terraform formatting
        run: terraform fmt -check -recursive
        working-directory: ${{ github.event.inputs.folder }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ github.event.inputs.folder }}

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ${{ github.event.inputs.folder }}

      - name: Show Terraform Plan
        run: terraform show -json tfplan > tfplan.json
        working-directory: ${{ github.event.inputs.folder }}

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: ${{ github.event.inputs.folder }}/tfplan

      - name: Plan Success Message
        if: success()
        run: echo "Terraform Plan succeeded."

      - name: Manual Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: 'rich-shw, sampsongith, sys949' # Replace with actual users or teams
          minimum-approvals: 1

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ${{ github.event.inputs.folder }}

      - name: Notify Team - Success
        if: success()
        run: |
          echo "Terraform apply was successful."

      - name: Apply Success Message
        if: success()
        run: echo "Terraform Apply succeeded."